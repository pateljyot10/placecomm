/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GroupDiscussion;

import hibernate.ChatMsg;
import hibernate.ChatPad;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author admin
 */
public class GDLoadAction extends DispatchAction {

    /* forward name="success" path="" */
    private static final String SUCCESS = "success";

    /**
     * This is the action called from the Struts framework.
     *
     * @param mapping The ActionMapping used to select this instance.
     * @param form The optional ActionForm bean for this request.
     * @param request The HTTP Request we are processing.
     * @param response The HTTP Response we are processing.
     * @throws java.lang.Exception
     * @return
     */
    //@Override
    public ActionForward execute1(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
            throws Exception {
        System.out.println("Inside GD-LOAD-ACTION");
        System.out.println("chatRoomId is:+++"+request.getParameter("chatPadId"));
        //Retrieving chatRoom Data...
        int chatPadId = Integer.valueOf(request.getParameter("chatPadId"));
        String chatPadName = request.getParameter("chatPadName");
        String chatPadDesc = request.getParameter("chatPadDesc");
        
        ChatPad chatPad=new ChatPad();
        chatPad.setChatPadId(chatPadId);
        chatPad.setChatPadName(chatPadName);
        chatPad.setChatPadDesc(chatPadDesc);
        
        GDActionForm gdActionForm = (GDActionForm) form;
        
        // Get the Messges for the ID given by User...
        gdActionForm.setChatPad(chatPad);
        gdActionForm.setChatMsgList(getMsgList(chatPadId,request));
        
        
        
        return mapping.findForward(SUCCESS);
    }

    private List<ChatMsg> getMsgList(int chatPadId, HttpServletRequest request) {
    
        SessionFactory factory=hibernate.HibernateUtil.getSessionFactory();
        Session session=factory.openSession();    
        
        Transaction tx=null;
    // Insert message with Pad ID 1 and User Id Generated by JavaScript ex.1
        try{
        tx=session.beginTransaction();
        StringBuilder query = new StringBuilder();
        int chatUserId=1; // HardCode for Now...
        query.append(" SELECT M.chat_msg_id,M.chat_user_id,M.chat_pad_id,M.chat_position_id,M.chat_msg_value,M.chat_msg_time,IFNULL(V.chat_visible,0) chat_visible from");
        query.append(" pathshala_db.chat_msg M LEFT JOIN pathshala_db.chat_user_vote V ");
        query.append(" ON M.chat_msg_id=V.chat_msg_id ");
        query.append(" where M.chat_pad_id=  "+chatPadId);
        //query.append(" and M.chat_user_id=  "+chatUserId);
        query.append(" and ( V.chat_visible is NULL OR V.chat_visible=1 )");
        // Query For Getting Messages List
        SQLQuery q_chatMsgList=session.createSQLQuery(query.toString());
        System.out.println("Query for getting messages is  : "+query.toString()); // Print Query on Console
        List<ChatMsg> chatMsgList =new ArrayList<ChatMsg>();  // will store the messages
        
        
        System.out.println("List Size is :" + chatMsgList.size());
        q_chatMsgList.addEntity(ChatMsg.class);
        chatMsgList=(ArrayList<ChatMsg>) q_chatMsgList.list();
        
        for(ChatMsg c:chatMsgList){
        System.out.println("Message Vote: "+c.getChatMsgValue()+"is visible:"+c.getChatVisible());
        }
        // request.setAttribute("chatRoomList", chatRoomList);         ------------------++++
        if(chatMsgList == null || chatMsgList.size()==0){
            chatMsgList.add(new ChatMsg(0, chatPadId, chatPadId,"Hey, There are NO Messages yet, why don't you START the discussion ?", new Date(),1));
        }
        tx.commit();
        session.close();
        return chatMsgList;
        }catch(Exception ex){
        tx.rollback();
        session.close();
        ex.printStackTrace();
        
        }
        return null;
        
    }
    
    public ActionForward GDPostMessageAction(ActionMapping mapping,ActionForm form,
		HttpServletRequest request,HttpServletResponse response) 
	throws Exception {
 
                System.out.println("Value Received is:"+ request.getParameter("textarea"));
                GDActionForm gdActionForm = (GDActionForm) form;
                ChatMsg chatMsg = new ChatMsg(1, gdActionForm.getChatPad().getChatPadId() , 0, request.getParameter("textarea"), new Date(),0);
                if(saveMessage(chatMsg)){
                gdActionForm.setChatMsgList(getMsgList(gdActionForm.getChatPad().getChatPadId(),request));
                System.out.println("Dispatch Action Working...");
                }
		return mapping.findForward("success");
	}

    private boolean saveMessage(ChatMsg chatMsg) {
        
        SessionFactory factory=hibernate.HibernateUtil.getSessionFactory();
        Session session=factory.openSession();    
        Transaction tx=null;
        try{
        tx=session.beginTransaction();
        session.save(chatMsg); // Save Message into Database...
        tx.commit();
        session.close();
        return true;
        }catch(Exception ex){
        tx.rollback();
        session.close();
        ex.printStackTrace();
        return false;
        }
        
    }
    
}
